/* TOTAL_SCH WITH CLAUSE BLOCK IS USED TO FETCH THE ACTUAL AND PUBLISHED FILES DATA FOR ALL EMPLOYEES - TOTAL OF 8 FILES.
VARIOUS DATA TYOE CHANGES ARE DONE FOR DATE COLUMNS TO FIX THE INCOSISTENCY IN THE FILES.*/

WITH TOTAL_SCH AS 
	(SELECT 
	SCHEDULETYPE,TRIM(A1.ID) ID,ACTIVITYDATE,BASE,TRIPNO,POSONFLIGHT,DEADHEAD,TAILNO,ACTUALBLOCKTIME,PAIDDAYOFF,
	FLTSEQNO,SCHEDULEDDEPDT_UTC DEPT_DATE,DEPARTURESTN DEPT_STN,ARRIVALSTN ARV_STN
	FROM 
		(
		SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,PAIDDAYOFF,
		FLTSEQNO,TO_DATE(SCHEDULEDDEPDT_UTC,'YYYY-MM-DD') SCHEDULEDDEPDT_UTC
		,SCHEDULEDDEPTM_UTC,DEPARTURESTN,ARRIVALSTN FROM CREW_ACTUAL_2019_H2       
		UNION 
		SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO	,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,PAIDDAYOFF,
		FLTSEQNO,TO_DATE(SCHEDULEDDEPDT_UTC,'MM/DD/YYYY') SCHEDULEDDEPDT_UTC
		,SCHEDULEDDEPTM_UTC,DEPARTURESTN,ARRIVALSTN FROM CREW_ACTUAL_2020_H1
		UNION
		SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO	,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,PAIDDAYOFF,
		FLTSEQNO,TO_DATE(SCHEDULEDDEPDT_UTC,'YYYY-MM-DD') SCHEDULEDDEPDT_UTC
		,SCHEDULEDDEPTM_UTC,DEPARTURESTN,ARRIVALSTN FROM CREW_ACTUAL_2020_H2
		UNION 
		SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO	,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,PAIDDAYOFF,
		FLTSEQNO,TO_DATE(SCHEDULEDDEPDT_UTC,'YYYY-MM-DD') SCHEDULEDDEPDT_UTC
		,SCHEDULEDDEPTM_UTC,DEPARTURESTN,ARRIVALSTN FROM CREW_ACTUAL_2021_H1
		)  A1

	UNION ALL

	SELECT 
	SCHEDULETYPE,TRIM(P1.ID) ID,TO_DATE(ACTIVITYDATE),BASE,TRIPNO,POSONFLIGHT,DEADHEAD,TAILNO,ACTUALBLOCKTIME,PAIDDAYOFF,
	FLTSEQNO,TO_DATE(SCHEDULEDDEPDT_UTC,'YYYY-MM-DD') DEPT_DATE,DEPARTURESTN DEPT_STN,ARRIVALSTN ARV_STN
	FROM 
		(SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,
		PAIDDAYOFF,FLTSEQNO,SCHEDULEDDEPDT_UTC,SCHEDULEDDEPTM_UTC,DEPARTURESTN,
		ARRIVALSTN FROM CREW_PUBLISH_2019_H2
		UNION
		SELECT DISTINCT  COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,
		PAIDDAYOFF,FLTSEQNO,SCHEDULEDDEPDT_UTC,SCHEDULEDDEPTM_UTC,DEPARTURESTN,
		ARRIVALSTN FROM CREW_PUBLISH_2020_H1
		UNION
		SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,
		PAIDDAYOFF,FLTSEQNO,SCHEDULEDDEPDT_UTC,SCHEDULEDDEPTM_UTC,DEPARTURESTN,
		ARRIVALSTN FROM CREW_PUBLISH_2020_H2
		UNION
		SELECT DISTINCT COMPANY,SCHEDULETYPE,ID,ACTIVITYDATE,POSONFLIGHT,BASE,TRIPNO,DEADHEAD,
		TAILNO,ACTYPE,FLIGHTNO,LEGSEQNO,ACTUALBLOCKTIME,TRAININGDUTYINDICATOR,
		PAIDDAYOFF,FLTSEQNO,SCHEDULEDDEPDT_UTC,SCHEDULEDDEPTM_UTC,DEPARTURESTN,
		ARRIVALSTN FROM CREW_PUBLISH_2021_H1
		) P1
	ORDER BY 1,3
	),

/*IN GROUP_ATT BLOCK, THE DATA HAS BEEN GROUPED BASED ON ACTUAL/PUBLISHED FILE AND CREW ID*/
GROUP_ATT AS
	(
    SELECT SCHEDULETYPE,ID, SUM(TOTAL_HOURS) AS TOTAL_HOURS, COUNT(DISTINCT TRIPNO) NO_OF_TRIPS    
    FROM
    (
            SELECT A.SCHEDULETYPE, A.ID, SUM(A.ACTUALBLOCKTIME) TOTAL_HOURS, A.TRIPNO
            FROM TOTAL_SCH A
            WHERE UPPER(TRIM(TRIPNO)) NOT IN 
                     (SELECT DISTINCT UPPER(TRIPNO_FLIGHTNO) FROM TRIPNO_DATA)
            AND TRIM(A.DEADHEAD) IS NULL
            GROUP BY A.SCHEDULETYPE, A.ID, A.TRIPNO
    )
    GROUP BY SCHEDULETYPE,ID
	),
    
/*RES_DATA IS USED TO FETCH THE DETAILS OF OFF DUTY, RESERVE AND TRAINING*/        
RES_DATA AS
    (
    SELECT *FROM 
        (
        SELECT A.SCHEDULETYPE, A.ID, COUNT(1) NON_TRIP_COUNT,UPPER(TND.CATEGORY) CATEGORY
        FROM TOTAL_SCH A
        INNER JOIN TRIPNO_DATA TND ON UPPER(TRIM(A.TRIPNO)) = UPPER(TRIPNO_FLIGHTNO)
        GROUP BY A.SCHEDULETYPE, A.ID,TND.CATEGORY
        )
    PIVOT 
    (
   MAX(NON_TRIP_COUNT)
   FOR CATEGORY IN ('OFF DUTY' AS OFFDUTY,'RESERVE' AS RESERVE,'TRAINING' AS TRAINING)
    )    
    ),

/*FINAL WITH CLAUSE BLOCK IS USED TO BRING THE ACTUAL AND PUBLISHED RECORDS OF AN EMPLOYEE ON THE SAME RECORD/ROW LEVEL*/
FINAL AS
    (
    SELECT A.ID AS ACTUAL_ID, P.ID AS PUBLISH_ID,NVL(A.ID,P.ID) ID,
    A.NO_OF_TRIPS ACTUAL_TRIPS_COUNT, P.NO_OF_TRIPS PUBLISHED_TRIPS_COUNT,
    P.TOTAL_HOURS AS PUBLISH_BLOCK_HOURS, 
    A.TOTAL_HOURS AS ACTUAL_BLOCK_TIME, (NVL(A.TOTAL_HOURS,0)-NVL(P.TOTAL_HOURS,0)) CHANGE_IN_HOURS
	FROM GROUP_ATT A
	FULL OUTER JOIN GROUP_ATT P ON A.ID = P.ID AND P.SCHEDULETYPE = 'P'
	WHERE A.SCHEDULETYPE = 'A'
	ORDER BY ID
    ),

/*FINAL_RES_DATA WITH CLAUSE BLOCK IS USED TO BRING THE ACTUAL AND PUBLISHED RECORDS RELATED OFF DUTY, RESERVE AND TRAINING DATA OF AN EMPLOYEE ON THE SAME RECORD/ROW LEVEL*/
FINAL_RES_DATA AS
    (
    SELECT RDA.ID, NVL(RDA.OFFDUTY,0) AS OFFDUTY_A, NVL(RDA.RESERVE,0) AS RESERVE_A, NVL(RDA.TRAINING,0) TRAINING_A,
    NVL(RDP.OFFDUTY,0) AS OFFDUTY_P, NVL(RDP.RESERVE,0) AS RESERVE_P, NVL(RDP.TRAINING,0) AS TRAINING_P
    FROM RES_DATA RDA 
    LEFT JOIN RES_DATA RDP ON RDA.ID = RDP.ID  AND RDP.SCHEDULETYPE = 'P'
    WHERE RDA.SCHEDULETYPE = 'A'
    ),

/* DEADHEAD BLOCK IS USED GET THE DEAD HEAD DETAILS FOR ACTUAL AND PUBLISHED SCHEDULES*/
DEADHEAD AS 
    (
    SELECT SCHEDULETYPE,ID,DEADHEAD,SUM(ACTUALBLOCKTIME) DEADHEADTIME,COUNT(DEADHEAD) DH_COUNT
    FROM TOTAL_SCH WHERE UPPER(DEADHEAD) = 'DH'
    GROUP BY SCHEDULETYPE,ID,DEADHEAD
    ),

/* THIS BLOCK BRING THE ACTUAL AND PUBLISHED DEAD HEAD DETAILS TO A SIGNLE ROW LEVEL FOR EACH EMPLOYEE*/    
FINAL_DEADHEAD AS
    (
    SELECT FDA.ID,FDA.DEADHEAD,NVL(FDA.DEADHEADTIME,0) AS DEADHEADTIME_A,NVL(FDA.DH_COUNT,0) AS DH_COUNT_A,
    NVL(FDP.DEADHEADTIME,0) AS DEADHEADTIME_P,NVL(FDP.DH_COUNT,0) AS DH_COUNT_P
    FROM DEADHEAD FDA
    LEFT JOIN DEADHEAD FDP ON FDA.ID = FDP.ID  AND FDP.SCHEDULETYPE = 'P'
    WHERE FDA.SCHEDULETYPE = 'A'
    ),

/* LOGIC TO FECTH THE DELAY DAA FILE INFORMATION*/
DELAY_G AS
        (
        SELECT FLIGHTSEQUENCENUMBER, SUM(DELAYMINUTES) TOTALDELAYMINS, COUNT(1) NO_OF_DELAYS  
        FROM DELAY_DATA DD
        GROUP BY FLIGHTSEQUENCENUMBER
        ),

/* LOGIC TO COMBINE THE DELAY DATA AND FLIGHT DATA INFORMATION*/    
DELAY_FLT AS
        (
        SELECT D.*,
        FD.FLIGHTNUMBER,FD.DEPARTSTATION,FD.ARRIVALSTATION,FD.FLIGHTORIGINALDEPARTDATETIME,FD.FLIGHTORIGINALARRIVALDATETIME,
        FD.FLIGHTACTUALBLOCKTIMEMINUTES,FD.FLIGHTOUTDATETIME,FD.FLIGHTOFFDATETIME,FD.FLIGHTONDATETIME,FD.FLIGHTINDATETIME,
        FD.CONTRACT,FD.FLIGHTSERVICETYPE,FD.FLIGHTCATEGORY,FD.SERVICETYPECODE,FD.AIRCRAFTREGISTRATION,FD.CUSTOMER,
        (CASE WHEN FD.AIRCRAFTTYPE = '738' THEN '737'
            WHEN FD.AIRCRAFTTYPE = '73F' THEN '737'
            WHEN FD.AIRCRAFTTYPE = '744' THEN '747'
            WHEN FD.AIRCRAFTTYPE = '748' THEN '747'
            WHEN FD.AIRCRAFTTYPE = '74Y' THEN '747'
            WHEN FD.AIRCRAFTTYPE = '762' THEN '767'
            WHEN FD.AIRCRAFTTYPE = '763' THEN '767'
            WHEN FD.AIRCRAFTTYPE = '76F' THEN '767'
            WHEN FD.AIRCRAFTTYPE = '77F' THEN '777'
        ELSE FD.AIRCRAFTTYPE END) AIRCRAFTTYPE
        FROM DELAY_G D
        INNER JOIN FLIGHT_DATA FD ON FD.FLIGHTSEQUENCENUMBER = D.FLIGHTSEQUENCENUMBER
        ),

/*AGGREGATING THE DELAY DATA TO CREW ID LEVEL*/
DELAY_DD AS
        (
        SELECT S.ID, ROUND(AVG(TOTALDELAYMINS/60),2) AVG_DELAY, ROUND(AVG(NO_OF_DELAYS)) AVG_NO_OF_DELAYS, 
        ROUND(AVG(FLIGHTACTUALBLOCKTIMEMINUTES/60),2) AVG_FLIGHT_BLOCKHOURS, COUNT(DISTINCT CONTRACT) CONTRACTS_WORKED,
        SUM(CASE WHEN ((TO_CHAR((TO_TIMESTAMP(FLIGHTORIGINALDEPARTDATETIME,'MM/DD/YYYY HH24:MI')),'HH24') > 21)) THEN 1 ELSE 0 END) LATENIGHT
        FROM (SELECT DISTINCT ID,FLTSEQNO FROM TOTAL_SCH) S
        LEFT JOIN DELAY_FLT DF ON S.FLTSEQNO = DF.FLIGHTSEQUENCENUMBER  
        GROUP BY S.ID
        ),

/*THIS IS FETCH THE TRIP LENGTH. LAYOVERS AND COUNT OF INTERNATIONAL AND DOMESTIC TRIPS DATA TAKEN FROM A DEFAULT QUERY*/        
TRIP_LEN_LAYOVERS AS    
    (
    SELECT ID, SUM(CASE WHEN IS_INTERNATIONAL=1 THEN 1 ELSE 0 END) AS INTERNATIONAL_COUNT,
    SUM(CASE WHEN IS_INTERNATIONAL=0 THEN 1 ELSE 0 END) AS DOMESTIC_COUNT,
    SUM(TRIPLENGTH) AS TRIPLENGTH, SUM(TOTAL_LAYOVERS) AS TOTAL_LAYOVERS
    FROM AGGREGATED_ACTUAL_PILOTSDATA X
    GROUP BY ID
    ORDER BY ID ASC
    ),

/*COMBINING ALL THE ABOVE BLOCKS DATA AT A CREW ID LEVEL*/    
STORED_DATA AS 
    (    
    SELECT 'ATTRITION' AS CURRENT_STATUS,X.ID CREW_ID, (X.ACTUAL_TRIPS_COUNT - X.PUBLISHED_TRIPS_COUNT) AS CHANGEINTRIPCOUNT,CHANGE_IN_HOURS,
    ATT.POSITION, ATT.HIRE_REHIRE, ATT.TERM_DATE, ATT.AGE_WHEN_TERMED CURRENT_AGE,
    ATT.RESIGNED_FOR_COMPANY, ATT.PREVIOUS_COMPANY, ATT.FLEET, ATT.SEAT,
    ROUND((ATT.TERM_DATE-ATT.HIRE_REHIRE)/365,2) NO_OF_YEARS_WORKED,
    TO_CHAR(ATT.HIRE_REHIRE,'YYYY') HIRE_REHIRE_YEAR, TO_CHAR(ATT.TERM_DATE,'YYYY') TERM_YEAR,
    OFFDUTY_A, RESERVE_A, TRAINING_A, OFFDUTY_P, RESERVE_P, TRAINING_P,
    (OFFDUTY_A - OFFDUTY_P) AS CHANGEINOFFDUTY,(RESERVE_A - RESERVE_P)AS CHANGEINRESERVE,
    (TRAINING_A - TRAINING_P)AS CHANGEINTRAINING,
    DEADHEADTIME_A,DH_COUNT_A,DEADHEADTIME_P,DH_COUNT_P,
    (DEADHEADTIME_A - DEADHEADTIME_P) AS CHANGEINDHTIME,(DH_COUNT_A - DH_COUNT_P) AS CHANGEINDHCOUNT,
    DD.*,
    NULLIF(ROUND(MONTHS_BETWEEN(TERM_DATE,(GREATEST(TO_DATE('1-JUL-2019'), HIRE_REHIRE)))),0) AS MON,
    TRIPLENGTH,TOTAL_LAYOVERS, DOMESTIC_COUNT, INTERNATIONAL_COUNT
    FROM FINAL X
	INNER JOIN ATTRITION_DATA ATT ON NVL(ACTUAL_ID,PUBLISH_ID) = TRIM(ATT.ID)
    LEFT JOIN FINAL_RES_DATA FRD ON FRD.ID = ATT.ID
    LEFT JOIN FINAL_DEADHEAD FDH ON FDH.ID = ATT.ID
    LEFT JOIN DELAY_DD DD ON DD.ID = ATT.ID
    LEFT JOIN TRIP_LEN_LAYOVERS TLL ON TLL.ID = ATT.ID
        
    UNION ALL
    
    SELECT 'EXISTING' AS CURRENT_STATUS, X.ID CREW_ID, (X.ACTUAL_TRIPS_COUNT - X.PUBLISHED_TRIPS_COUNT) AS CHANGEINTRIPCOUNT,CHANGE_IN_HOURS,
    ACT.POSITION, ACT.HIRE_REHIRE, NULL, ACT.AGE CURRENT_AGE,
    NULL, ACT.PREVIOUS_COMPANY, ACT.FLEET, ACT.SEAT,    
    ROUND((SYSDATE-ACT.HIRE_REHIRE)/365,2) NO_OF_YEARS_WORKED,
    TO_CHAR(ACT.HIRE_REHIRE,'YYYY') HIRE_REHIRE_YEAR, NULL TERM_YEAR,
    OFFDUTY_A, RESERVE_A, TRAINING_A, OFFDUTY_P, RESERVE_P, TRAINING_P,
    (OFFDUTY_A - OFFDUTY_P) AS CHANGEINOFFDUTY,(RESERVE_A - RESERVE_P)AS CHANGEINRESERVE,
    (TRAINING_A - TRAINING_P)AS CHANGEINTRAINING,
    DEADHEADTIME_A,DH_COUNT_A,DEADHEADTIME_P,DH_COUNT_P,
    (DEADHEADTIME_A - DEADHEADTIME_P) AS CHANGEINDHTIME,(DH_COUNT_A - DH_COUNT_P) AS CHANGEINDHCOUNT,
    DD.*,
     NULLIF(ROUND(MONTHS_BETWEEN(TO_DATE('30-JUN-2021'),(GREATEST(TO_DATE('1-JUL-2019'), HIRE_REHIRE)))),0) AS MON,
     TRIPLENGTH,TOTAL_LAYOVERS, DOMESTIC_COUNT, INTERNATIONAL_COUNT
    FROM FINAL X
	INNER JOIN ACTIVE_DATA ACT ON NVL(ACTUAL_ID,PUBLISH_ID) = TRIM(ACT.ID)
    LEFT JOIN FINAL_RES_DATA FRD ON FRD.ID = ACT.ID
    LEFT JOIN FINAL_DEADHEAD FDH ON FDH.ID = ACT.ID
    LEFT JOIN DELAY_DD DD ON DD.ID = ACT.ID
    LEFT JOIN TRIP_LEN_LAYOVERS TLL ON TLL.ID = ACT.ID
    )
    
    /*FINAL SELECT QUERY*/
    SELECT
        CURRENT_STATUS, CREW_ID AS ID, ROUND(NVL(CHANGEINTRIPCOUNT/MON,0),2) AS CHANGEINTRIPCOUNT, ROUND(NVL(CHANGE_IN_HOURS/MON,0),2) AS CHANGE_IN_HOURS,
        CURRENT_AGE, FLEET, SEAT,ROUND(NVL(CHANGEINOFFDUTY/MON,0),2) AS CHANGEINOFFDUTY, ROUND(NVL(CHANGEINRESERVE/MON,0),2) AS CHANGEINRESERVE,
        ROUND(NVL(CHANGEINTRAINING/MON,0),2) AS CHANGEINTRAINING, 
        ROUND(NVL(CHANGEINDHTIME/MON,0),2) AS CHANGEINDHTIME, ROUND(NVL(CHANGEINDHCOUNT/MON,0),2) AS CHANGEINDHCOUNT,
        AVG_DELAY, AVG_NO_OF_DELAYS,AVG_FLIGHT_BLOCKHOURS, CONTRACTS_WORKED, LATENIGHT, ROUND(NVL(TRIPLENGTH/MON,0),2) AS TRIPLENGTH,
        ROUND(NVL(TOTAL_LAYOVERS/MON,0),2) AS TOTAL_LAYOVERS, ROUND(NVL(INTERNATIONAL_COUNT/MON,0),2) AS INT_COUNT, ROUND(NVL(DOMESTIC_COUNT/MON,0),2) AS DOM_COUNT
    FROM STORED_DATA
    WHERE (AVG_DELAY IS NOT NULL
    AND   AVG_NO_OF_DELAYS IS NOT NULL
    AND   AVG_FLIGHT_BLOCKHOURS IS NOT NULL);